filter {
    if [suricata][eve][http] {
        mutate {
            rename => {
                "[suricata][eve][http][http_method]" => "[http][request][method]"
                "[suricata][eve][http][status]" => "[http][response][status_code]"
                "[suricata][eve][http][hostname]" => "[destination][domain]"
            }
        }

        if [destination][domain] and [network][protocol] == "http" {
            mutate {
                copy => { "[destination][domain]" => "[url][domain]" }
            }
        }

        if [suricata][eve][http][url] {
            ruby {
                init => "
                    @pattern = /(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?/
                "
                code => "
                    url = event.get('[suricata][eve][http][url]')
                    res = @pattern.match(url)

                    if res['path'] then
                        event.set('[url][path]', res['path'])
                    end
                    if res['query'] then
                        event.set('[url][query]', res['query'])
                    end
                    if res['fragment'] then
                        event.set('[url][fragment]', res['fragment'])
                    end
                "
            }
        }

        mutate {
            rename => {
                "[suricata][eve][http][url]" => "[url][original]"
                "[suricata][eve][http][http_refer]" => "[http][request][referrer]"
                "[suricata][eve][http][length]" => "[http][response][body][bytes]"
                "[suricata][eve][http][http_user_agent]" => "[user_agent][original]"
            }
        }
        
        ruby {
            path => "/etc/logstash/scripts/normalized_http_headers.rb"
        }
    }
}
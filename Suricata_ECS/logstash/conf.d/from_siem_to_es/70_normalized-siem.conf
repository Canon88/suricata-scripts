filter {
    date {
        match => ["timestamp", "ISO8601"]
        target => "timestamp"
    }

    mutate {
        rename => {
            "[data][source]" => "source"
            "[data][destination]" => "destination"
            "[data][network]" => "network"
            
            "[data][event]" => "event"
            "[data][fileset]" => "fileset"
            
            "[data][http]" => "http"
            "[data][url]" => "url"
            "[data][user_agent]" => "user_agent"

            "[data][related]" => "related"
            "[data][threat]" => "threat"

            "[rule][groups]" => "[rule][ruleset]"
        }

        convert => {
            #"[agent][id]" => "integer"

            "[event][severity]" => "integer"

            "[rule][id]" => "integer"

            "[related][rule][id]" => "integer"

            "[network][bytes]" => "integer"
            "[network][packets]" => "integer"

            "[source][port]" => "integer"
            "[source][bytes]" => "integer"
            "[source][packets]" => "integer"

            "[destination][port]" => "integer"
            "[destination][bytes]" => "integer"
            "[destination][packets]" => "integer"

            "[http][response][status_code]" => "integer"
            "[http][response][body][bytes]" => "integer"
        }

        remove_field => [
            "beat", "input_type", "tags", "count", "@version",
            "ecs", "log", "offset", "type", "host", "predecoder",
            "decoder", "[data][rule]"
        ]

        copy => {
            "[rule][description]" => "[rule][name]"
        }
    }

    if [event][kind] == "alarm" {
        mutate {
            rename => {
                "previous_output" => "[related][event][log]"
            }
        }

        ruby {
            code => "
                src_ip = event.get('[source][ip]')
                dst_ip = event.get('[destination][ip]')
                src_port = event.get('[source][port]').to_s
                dst_port = event.get('[destination][port]').to_s
                rule_name = event.get('[related][rule][name]')[0].to_s

                rule_description = src_ip + ':' + src_port + ' -> ' + dst_ip + ':' + dst_port + ' -> ' + rule_name
                event.set('[rule][description]', rule_description)

                if event.get('[related][rule][id]') then
                    sid = event.get('[related][rule][id]')[0]
                    event.set('[rule][uuid]', sid)
                end

                event.set('[rule][category]', 'Frequency')
            "
        }
    }
}
